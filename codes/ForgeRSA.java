/* Forging an RSA signature when 2 encrypted messages are known, assumption: e and n are known
** Author: Richa */

import java.math.BigInteger;

public class ForgeRSA {
	static BigInteger e;
	static BigInteger n;
	static BigInteger sign1, sign2, sign3; 
	static BigInteger m1, m2, m3;

	ForgeRSA() {
		e = new BigInteger("65537");
		n = new BigInteger("100830058979436874365199949956961920344045963626641831859403224642801069388924375059473100244852449399795250642838712009546866575042921489959857064945252055853054537552911153028118389753169394371315891725517226667457589074177029246805661561942415774123870869427623830671714391254429672624028146734887585158247");
		m1 = new BigInteger("11974640203648168015833486866443698731063530550161766978637215461389094099758793551651110796066892623490667045017525639334461468650369558504906371790129053381426222369048862385995637871605905029972436237174043814041986274415251947713491735784367219876716875707922179734133659571750957929714757018313999866557");
		m3 = new BigInteger("82430217683451463602411958158452017909826233573745039976515505803780591927965381948287525665052942606926219793275228717810795495672697378624561140863164253529534107833104111544041024279138689488468575173214699797946988742597422010595153878785654844011920746217463403214240698857421463447551551235505730024381");
		// Calculate M2::
		BigInteger m1inverse = m1.modInverse(n);
		m2 = (m3.multiply(m1inverse)).mod(n);

		sign1 = new BigInteger("63639497074267297973838881160189032836030780028363983166577618583854345446245140899625814507808781976790215692746180991141156082746871059814062824871452551755810012118003270420099821563294972780920516955604030933281572692441587604004595820175461057653008540704644275827548547664059681830629986603172641033102");
		sign3 = new BigInteger("50364801206290431718951112411301667815306465791138227436594660198745281702267725701630523862127564890487829794933899581155514648039502530155101905163451048078498072047425497554327138440095460578400007403494329280484131252204425043126187288663731505310174072265690814030804665151891841918363628604935802561959");
	}

	public static void forge() {
		BigInteger sign1_inverse = sign1.modInverse(n);
		sign2 = sign3.multiply(sign1_inverse);
		System.out.println("Forged signature for M2 is:" + sign2 );
	}

	public static void validateM2Signature() {
		if (sign2.modPow(e, n).compareTo(m2) == 0) {
			System.out.println("\nThis is a valid Signature for M2");
		} else {
			System.out.println("\nInvalid Signature");
		}
	}

	public static void main(String[] args) {
		ForgeRSA signature = new ForgeRSA();
	    signature.forge();
	    signature.validateM2Signature();
	}
}
